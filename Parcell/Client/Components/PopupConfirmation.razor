@inject HttpInterceptorService _interceptor
@implements IDisposable
@inject HttpClient _client
@attribute [Authorize]

<div class="modal fade show" id="myModal" style="display:block; background-color: rgba(10,10,10,.8);"
     aria-modal="true" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">@Title</h4>
                <button type="button" class="close" @onclick="@ModalCancel">&times;</button>
            </div>
            <div class="modal-body">
                <p><b>@ProductName</b> @ActionDone</p>
            </div>
            <div class="modal-footer">
                <button type="submit" class="btn btn-success btn-block" @onclick="@ModalCancel">Ok</button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public EventCallback<bool> OnClose { get; set; }

    [Parameter]
    public string Username { get; set; }

    [Parameter]
    public string ProductName { get; set; }

    [Parameter]
    public string ActionDone { get; set; }

    protected async override Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
    }

    public bool DeleteDialogOpen { get; set; }

    private Task ModalCancel()
    {
        return OnClose.InvokeAsync(false);
    }

    private Task ModalOk()
    {
        return OnClose.InvokeAsync(true);
    }
    public void Dispose()
    {
        _interceptor.DisposeEvent();
    }
}