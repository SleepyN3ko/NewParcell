@page "/buyswap/view/{id:int}"
@inject HttpClient _client
@inject NavigationManager _navManager
@using Parcell.Client.Pages.BuySwap
@using Parcell.Client.Components
@inject HttpInterceptorService _interceptor
@implements IDisposable


<AuthorizeView Context="getName">
    @{ username = getName.User.Identity.Name;}
</AuthorizeView>
<body>

    <link rel="stylesheet" type="text/css" href="/css/Sell.css" />

    <div class="container bootdey">
        <div class="col-md-12">
            <section class="panel">
                <div class="panel-body">
                    <div class="col-md-6">
                        <div class="pro-img-details">
                            <img src="@product.Image" onerror="this.onerror = null;this.src='/images/missingImage.png'" alt="Missing Image" />
                        </div>
                    </div>
                    <div class="col-md-6">
                        <h4 class="pro-d-title">
                            <a class="">
                                <b>@product.Name</b>
                            </a>
                        </h4>
                        <p>
                            <strong>Seller: </strong>@product.Username
                        </p>
                        <p>
                            <strong>Product description:</strong><br>
                            @product.Description
                        </p>
                        <div class="product_meta">
                            <span class="posted_in"> <strong>Categories: </strong><a>@product.P_category</a></span>
                        </div>
                        <div class="m-bot15">
                            <strong>Price: </strong><span class="price">@product.Price</span>
                        </div>
                        <br />
                        @if (username != product.Username)
                        {
                            <p>
                                <button class="btn btn-round btn-info" style="background-color:blue;color:white" type="button" @onclick="AddToWishList"><span class="oi oi-star" />Add product to wishlist</button>
                            </p>
                        }
                        @if (product.S_Category != "noswap")
                        {
                            <p> <strong>Swap description:</strong><br>@product.Swap_description </p>
                            <div class="product_meta">
                                <span class="posted_in"> <strong>Swap Categories: </strong><a>@product.S_Category</a></span>
                            </div>
                            @if (username != product.Username)
                            {
                                <p><button class="btn btn-round" style="background-color:green;color:white" type="button" @onclick="()=>OpenSwapDialog()"><span class="oi oi-loop"></span>Send Swap Request</button></p>
                                @if (swapDialogOpen)
                                {
                                    <SwapDialog swapdetails="@swapdetails" Title="Add Swap Product" s_Username="@username" product="@product" OnClose="@CloseSwapDialog" OnValidSubmit="@PostSwap" ButtonText="Send Swap Request" />
                                }
                            }
                        }
                        else
                        {
                            <a style=" font-size: 17px; "><strong>Note: Not willing to Swap</strong></a>
                        }
                        <br /><br />

                        @if (username != product.Username)
                        {
                            <div class="form-group">
                                <label style="display:inline"><strong>Stock: </strong>@product.Stock</label>
                                <label><strong>Quantity: </strong></label>
                                <input type="number" @bind-value="@cartitem.Quantity" />
                            </div>
                            <p>
                                <button class="btn btn-round btn-danger" type="button" @onclick="AddToCart"><span class="oi oi-cart" />Add to Cart</button>
                            </p>
                        }
                        @if (dialogOpen)
                        {
                            <PopupConfirmation Title="Notification" OnClose="@CloseDialog" Username="@username" ProductName="@product.Name" ActionDone="@actionText" />
                        }
                    </div>
                </div>
            </section>
        </div>
    </div>
</body>

@code {
    [Parameter] public int id { get; set; }
    Product product = new Product();
    Swap swapdetails = new Swap();
    WishListItem wishlistitem = new WishListItem();
    CartItem cartitem = new CartItem();

    public bool getusername = false;
    public bool swapDialogOpen { get; set; }
    public bool dialogOpen { get; set; }
    public string username;
    public string actionText;
    public int currentUserWishListId;
    private List<WishList> wishlists;
    private List<WishListItem> wishlistitems;
    private WishList addNewWishList = new WishList();
    private WishList currentWishList;
    public bool alreadyFound = false;

    public int currentUserCartId;
    private List<CartItem> cartitems;
    private List<Cart> carts;
    private Cart addNewCart = new Cart();
    private Cart currentCart;

    protected async override Task OnParametersSetAsync()
    {
        _interceptor.MonitorEvent();
        product = await _client.GetFromJsonAsync<Product>($"{Endpoints.ProductsEndpoint}/{id}");
        wishlists = await _client.GetFromJsonAsync<List<WishList>>($"{Endpoints.WishListEndpoint}");
        wishlistitems = await _client.GetFromJsonAsync<List<WishListItem>>($"{Endpoints.WishListItemEndpoint}");
        carts = await _client.GetFromJsonAsync<List<Cart>>($"{Endpoints.CartEndpoint}");
        cartitems = await _client.GetFromJsonAsync<List<CartItem>>($"{Endpoints.CartItemEndpoint}");
    }

    private async Task AddToWishList()
    {

        currentUserWishListId = -69;
        foreach (WishList wishlist in wishlists)
        {
            if (wishlist.Username == username)
            {
                currentUserWishListId = wishlist.Id;
                currentWishList = wishlist;
                Console.WriteLine("user has been found");
                break;
            }
        }
        if (currentUserWishListId == -69)
        {
            addNewWishList.Username = username;
            var response = await _client.PostAsJsonAsync(Endpoints.WishListEndpoint, addNewWishList);
            string location = response.Headers.Location.AbsoluteUri;

            currentWishList = await _client.GetFromJsonAsync<WishList>($"{location}");
        }

        wishlistitem.Product_id = product.Id;
        wishlistitem.Date = DateTime.Now;
        wishlistitem.Wishlist_id = currentWishList.Id;

        foreach (var currentwishlistitem in wishlistitems)
        {
            if (currentwishlistitem.Product_id == product.Id && currentwishlistitem.Wishlist_id == currentWishList.Id)
            {
                actionText = "is already added to your wishlist";
                alreadyFound = true;
                OpenDialog();
            }
        }
        if (!alreadyFound)
        {
            var responseEnd = await _client.PostAsJsonAsync(Endpoints.WishListItemEndpoint, wishlistitem);
            if (responseEnd.IsSuccessStatusCode)
            {
                actionText = "has been added to your wishlist.";
                OpenDialog();
            }
        }
        alreadyFound = false;
        await OnParametersSetAsync();
    }

    private async Task AddToCart()
    {
        currentUserCartId = -69;
        foreach (Cart cart in carts)
        {
            if (cart.Username == username)
            {
                currentUserCartId = cart.Id;
                currentCart = cart;
                break;
            }
        }

        if (currentUserCartId == -69)
        {
            addNewCart.Username = username;
            var response = await _client.PostAsJsonAsync(Endpoints.CartEndpoint, addNewCart);
            string location = response.Headers.Location.AbsoluteUri;

            currentCart = await _client.GetFromJsonAsync<Cart>($"{location}");
        }

        cartitem.Product_id = product.Id;
        cartitem.Date = DateTime.Now;
        cartitem.Cart_id = currentCart.Id;
        foreach (var currentCartItem in cartitems)
        {
            if (currentCartItem.Product_id == product.Id && currentCartItem.Cart_id == currentCart.Id)
            {
                currentCartItem.Quantity += cartitem.Quantity;
                var responseExisted = await _client.PutAsJsonAsync($"{Endpoints.CartItemEndpoint}/{currentCartItem.Id}", currentCartItem);
                if (responseExisted.IsSuccessStatusCode)
                {
                    actionText = "has been added to an existing cart item.";
                    alreadyFound = true;
                    OpenDialog();
                }
            }
        }
        if (!alreadyFound)
        {
            var responseEnd = await _client.PostAsJsonAsync(Endpoints.CartItemEndpoint, cartitem);
            if (responseEnd.IsSuccessStatusCode)
            {
                actionText = "has been added as a new cart item.";
                OpenDialog();
            }
        }
        alreadyFound = false;
        await OnParametersSetAsync();
    }




    //https://www.bootdey.com/snippets/view/shop-product-detail#html




    private async Task CloseDialog(bool accepted)
    {
        dialogOpen = false;
        StateHasChanged();
    }
    private void OpenDialog()
    {
        dialogOpen = true;
        StateHasChanged();
    }







    private async Task CloseSwapDialog(bool accepted)
    {
        swapDialogOpen = false;
        StateHasChanged();
    }
    private void OpenSwapDialog()
    {
        swapDialogOpen = true;
        StateHasChanged();
    }

    async Task PostSwap()
    {
        await _client.PostAsJsonAsync($"{Endpoints.SwapsEndpoint}", swapdetails);
        swapDialogOpen = false;
        StateHasChanged();
    }
    public void Dispose()
    {
        _interceptor.DisposeEvent();
    }
}