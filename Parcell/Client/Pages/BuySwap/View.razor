@page "/buyswap/view/{id:int}"
@inject HttpClient _client
@inject NavigationManager _navManager

<body>

    <link rel="stylesheet" type="text/css" href="/css/Sell.css" />

    <div class="container bootdey">
        <div class="col-md-12">
            <section class="panel">
                <div class="panel-body">
                    <div class="col-md-6">
                        <div class="pro-img-details">
                            <img src="@product.Image" onerror="this.onerror = null;this.src='/images/missingImage.png'" alt="Missing Image" />
                        </div>
                    </div>
                    <div class="col-md-6">
                        <h4 class="pro-d-title">
                            <a class="">
                                <b>@product.Name</b>
                            </a>
                        </h4>
                        <hr />
                        <p>
                            @product.Description
                        </p>
                        <div class="product_meta">
                            <span class="posted_in"> <strong>Categories:</strong><a>@product.P_category</a></span>
                        </div>
                        <div class="m-bot15"> <strong>Price : </strong><span class="price">@product.Price</span></div>
                        <div class="form-group">
                            <label>Quantity</label>
                            <input type="number" placeholder="1" class="col-md-3 form-control">
                        </div>
                        <AuthorizeView Context="getName">
                            @{ username = getName.User.Identity.Name;}
                        </AuthorizeView>
                        @if (username != product.Username)
                        {
                            <p>
                                <button class="btn btn-round btn-danger" type="button"><span class="oi oi-cart"></span> Add to Cart</button>
                            </p>
                            <p>
                                <button class="btn btn-round btn-info" type="button" @onclick="AddToWishList"><span class="oi oi-star" />Add to wishlist</button>
                            </p>
                            <p>
                                <button class="btn btn-round" style="background-color:greenyellow;color:white" type="button"><span class="oi oi-cart"></span> Add to Swap</button>
                            </p>
                        }
                    </div>
                </div>
            </section>
        </div>
    </div>
</body>

@code {
    [Parameter] public int id { get; set; }
    Product product = new Product();
    WishListItem wishlistitem = new WishListItem();

    public bool getusername = false;
    public string username;
    public int currentUserWishListId;
    private List<WishList> wishlists;
    private WishList addNewWishList = new WishList();
    private WishList currentWishList;

    protected async override Task OnParametersSetAsync()
    {
        product = await _client.GetFromJsonAsync<Product>($"{Endpoints.ProductsEndpoint}/{id}");
        wishlists = await _client.GetFromJsonAsync<List<WishList>>($"{Endpoints.WishListEndpoint}");
    }

    private async Task AddToWishList()
    {
        currentUserWishListId = -69;
        foreach (WishList wishlist in wishlists) {
            if (wishlist.Username == username)
            {
                currentUserWishListId = wishlist.Id;
                currentWishList = wishlist;
                Console.WriteLine("user has been found");
                break;
            }
        }
        if (currentUserWishListId == -69)
        {
            addNewWishList.Username = username;
            var response = await _client.PostAsJsonAsync(Endpoints.WishListEndpoint, addNewWishList);
            string location = response.Headers.Location.AbsoluteUri;

            currentWishList = await _client.GetFromJsonAsync<WishList>($"{location}");
            //wishlists = await _client.GetFromJsonAsync<List<WishList>>($"{Endpoints.WishListEndpoint}");
            //foreach (WishList wishlist in wishlists)
            //{
            //    if (wishlist.Username == username)
            //    {
            //        currentUserWishListId = wishlist.Id;
            //        currentWishList = wishlist;
            //        Console.WriteLine("user wishlist has been added");
            //        break;
            //    }
            //}
        }

        wishlistitem.Product_id = product.Id;
        wishlistitem.Date = DateTime.Now;
        wishlistitem.Wishlist_id = currentWishList.Id;
        await _client.PostAsJsonAsync(Endpoints.WishListItemEndpoint, wishlistitem);
        Console.WriteLine("posted");
    }
    //https://www.bootdey.com/snippets/view/shop-product-detail#html
}