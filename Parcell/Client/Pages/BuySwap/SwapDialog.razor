@inject HttpInterceptorService _interceptor
@implements IDisposable
@inject HttpClient _client
@attribute [Authorize]

<div class="modal fade show" id="myModal" style="display:block; background-color: rgba(10,10,10,.8);"
     aria-modal="true" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">@Title</h4>
                <button type="button" class="close" @onclick="@ModalCancel">&times;</button>
            </div>
            <div class="modal-body">
                <EditForm EditContext="editContext" OnValidSubmit="@OnValidSubmit">
                    <DataAnnotationsValidator />
                    @if (addingProduct)
                    {
                        <div class="form-group">
                            <label>Choose your product to swap with</label>
                            <div>
                                <InputSelect @bind-Value="swapdetails.SProduct_id" class="form-control">
                                    @if (Products != null)
                                        {
                                        <option value="" default="true" hidden>--Select--</option>
                                            foreach (var eachproduct in Products)
                                            {
                                                if (eachproduct.Username == s_Username)
                                                {

                                                    if (eachproduct.P_category == product.S_Category)
                                                    {
                                                    <option value="@eachproduct.Id" default>@eachproduct.Name</option>
                                                        suitable_products = true;
                                                    }
                                                }
                                            }
                                            if (suitable_products == false)
                                            {

                                            <option value="">No suitable products</option>
                                            }
                                        }
                                </InputSelect>
                                <ValidationMessage For="@(() => swapdetails.SProduct_id)" />
                            </div>
                        </div>
                    }
                    <div class="form-group">
                        <label>@sString product quantity</label>
                        <div>
                            <InputNumber @bind-Value="swapdetails.SProduct_quantity" class="form-control" />
                            <ValidationMessage For="@(() => swapdetails.SProduct_quantity)" />
                        </div>
                    </div>
                    <div class="form-group">
                        <label>@pString product quantity</label>
                        <div>
                            <InputNumber @bind-Value="swapdetails.PProduct_quantity" class="form-control" />
                            <ValidationMessage For="@(() => swapdetails.PProduct_quantity)" />
                        </div>
                    </div>
                    <button type="submit" class="btn btn-success btn-block" disabled="@disable_button">
                        @ButtonText
                    </button>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public Swap swapdetails { get; set; }

    [Parameter]
    public EventCallback OnValidSubmit { get; set; }


    [Parameter]
    public EventCallback<bool> OnClose { get; set; }

    [Parameter]
    public Product product { get; set; }

    [Parameter]
    public string s_Username { get; set; }

    [Parameter]
    public string ButtonText { get; set; }

    [Parameter]
    public bool addingProduct { get; set; } = true;

    private List<Product> Products;
    public Boolean disable_button = true;
    EditContext editContext;
    public Boolean suitable_products = false;
    public string sString = "My";
    public string pString = "Their";

    protected async override Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        editContext = new EditContext(swapdetails);
        editContext.OnFieldChanged += EditContext_OnFieldChanged;
        Products = await _client.GetFromJsonAsync<List<Product>>($"{Endpoints.ProductsEndpoint}");
        if (addingProduct)
        {
            swapdetails.SStatus = true;
            swapdetails.PStatus = false;
            swapdetails.PProduct_id = product.Id;
        }
        else
        {
            swapdetails.PProduct = await _client.GetFromJsonAsync<Product>($"{Endpoints.ProductsEndpoint}/{swapdetails.PProduct_id}");
            swapdetails.SProduct = await _client.GetFromJsonAsync<Product>($"{Endpoints.ProductsEndpoint}/{swapdetails.SProduct_id}");
            sString = swapdetails.SProduct.Username == s_Username ? "My" : "Their";
            pString = swapdetails.PProduct.Username == s_Username ? "My" : "Their";
            swapdetails.SStatus = swapdetails.SProduct.Username == s_Username ? true : false;
            swapdetails.PStatus = swapdetails.PProduct.Username == s_Username ? true : false;
        }
        swapdetails.Date = DateTime.Now;

    }
    private void EditContext_OnFieldChanged(object sender, FieldChangedEventArgs e)
    {
        //only enables button when a value is selected
        //improves user experience
        if (swapdetails.SProduct_id != 0)
        {
            disable_button = false;
        }
    }

    private Task ModalCancel()
    {
        return OnClose.InvokeAsync(false);
    }

    private Task ModalOk()
    {
        return OnClose.InvokeAsync(true);
    }
    public void Dispose()
    {
        _interceptor.DisposeEvent();
    }
}