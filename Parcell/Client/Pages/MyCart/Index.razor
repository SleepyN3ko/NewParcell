@page "/mycart"

@inject HttpClient _client
@inject IJSRuntime js
@inject NavigationManager _navManager
@attribute [Authorize]
<AuthorizeView Context="getName">
    @{ username = getName.User.Identity.Name;}
</AuthorizeView>
@if (cartitems == null)
{
    <div class="alert alert-info">Loading your cart</div>
}
else
{

    <div class="table-responsive">
        <table class="table">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Details</th>
                    <th>Category</th>
                    <th>Picture</th>
                    <th>Quantity selected</th>
                    <th>View product</th>
                    <th>Remove from cart</th>
                    <th>Add to checkout</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var cartitem in cartitems)
                {
                    @if (currentcart.Id == cartitem.Cart_id)
                    {
                        cartitem.Product = Products.First(q => q.Id == cartitem.Product_id);
                        <tr>
                            <td>@cartitem.Product.Name</td>
                            <td>
                                <ul>
                                    <li>Description = @cartitem.Product.Description</li>
                                    <li>Stock = @cartitem.Product.Stock</li>
                                    <li>Price = @cartitem.Product.Price</li>
                                </ul>
                            </td>
                            <td>@cartitem.Product.P_category</td>
                            <td>
                                <img style="width:80px;height:80px" src="@cartitem.Product.Image" onerror="this.onerror = null;this.src='/css/imageNotFound.png'" alt="Missing Image" />
                            </td>
                            <td>
                                @cartitem.Quantity
                            </td>
                            <td>
                                <a href="/buyswap/view/@cartitem.Product.Id" class="btn btn-info">
                                    <span class="oi oi-book"></span>
                                </a>
                            </td>
                            <td>
                                <button class="btn btn-danger" @onclick="@(()=>RemoveFromCart(cartitem.Id,cartitem.Product.Name))">
                                    <span class="oi oi-delete"></span>
                                </button>
                            </td>
                            <td>
                                <input type="checkbox" @onchange="eventArgs => { updateCheckout(cartitem, eventArgs.Value); }"  />
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
}

<button style="background-color: #4CAF50; color: white; position: fixed; left: 85%; top: 90%; width: 200px; height: 40px;" 
        @onclick="@addToOrders">Make a order</button>
<button style="background-color: #008CBA; color: white; position: fixed; left: 85%; top: 95%; width: 200px; height: 40px;" 
        onclick="location.href = '/mycart/orders';">View Orders</button>


@code {
    private List<Product> Products;
    private List<Cart> carts;
    private List<CartItem> cartitems;
    private Cart currentcart;
    private Cart addNewCart = new Cart();
    public string username;
    public Product currentproduct;
    private int currentUserCartId;
    public List<CartItem> itemsToOrder = new List<CartItem>();
    public Order currentOrder = new Order();
    public OrderItem currentOrderItem = new OrderItem();
    public int totalprice;

    protected async override Task OnInitializedAsync()
    {
        Products = await _client.GetFromJsonAsync<List<Product>>($"{Endpoints.ProductsEndpoint}");
        carts = await _client.GetFromJsonAsync<List<Cart>>($"{Endpoints.CartEndpoint}");
        currentUserCartId = -69;
        foreach (Cart cart in carts)
        {
            if (cart.Username == username)
            {
                currentUserCartId = cart.Id;
                currentcart = cart;
            }
        }
        @*Create a new cart if the user had not yet created their cart*@
    if (currentUserCartId == -69)
    {

        addNewCart.Username = username;
        var response = await _client.PostAsJsonAsync(Endpoints.CartEndpoint, addNewCart);
        string location = response.Headers.Location.AbsoluteUri;

        currentcart = await _client.GetFromJsonAsync<Cart>($"{location}");
    }
    cartitems = await _client.GetFromJsonAsync<List<CartItem>>($"{Endpoints.CartItemEndpoint}");
}

void updateCheckout(CartItem cartitem,object isChecked)
{
    if ((bool)isChecked)
    {
        //does not contain this item and just got checked
        if (!itemsToOrder.Contains(cartitem))
        {
            itemsToOrder.Add(cartitem);
        }
    }
    else
    {
        //removes the cartitem that got unchecked
        if (itemsToOrder.Contains(cartitem))
        {
            itemsToOrder.Remove(cartitem);
        }
    }
}

async Task RemoveFromCart(int cartitemid, string productName)
{
    var cartitem = cartitems.First(q => q.Id == cartitemid);

    var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to remove {productName} from your cart?");
    if (confirm)
    {
        await _client.DeleteAsync($"{Endpoints.CartItemEndpoint}/{cartitemid}");
        await OnInitializedAsync();
    }
}
async Task addToOrders()
{
    //only make an order if list is not empty
    if (itemsToOrder.Any())
    {
        currentOrder.Username = username;
        currentOrder.Status = false;
        currentOrder.Date = DateTime.Now;
        totalprice = 0;
        var response = await _client.PostAsJsonAsync(Endpoints.OrdersEndpoint, currentOrder);
        string location = response.Headers.Location.AbsoluteUri;
        currentOrder = await _client.GetFromJsonAsync<Order>(location);
        foreach (CartItem orderitem in itemsToOrder)
        {
            currentOrderItem.Product_id = orderitem.Product.Id;
            currentOrderItem.Product_Price = orderitem.Product.Price;
            currentOrderItem.Product_Quantity = orderitem.Quantity;
            currentOrderItem.Order_id = currentOrder.Id;
            totalprice += currentOrderItem.Product_Price * currentOrderItem.Product_Quantity;
            await _client.PostAsJsonAsync(Endpoints.OrderItemsEndpoint, currentOrderItem);
            await _client.DeleteAsync($"{Endpoints.CartItemEndpoint}/{orderitem.Id}");
        }
        currentOrder.Total_Price = totalprice;
        await _client.PutAsJsonAsync(location, currentOrder);
        _navManager.NavigateTo($"/mycart/orders/{currentOrder.Id}");
    }
}
}
