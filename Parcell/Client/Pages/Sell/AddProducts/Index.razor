@page "/add-products"
@inherits AddProductModalBase
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@if (Categories == null)
{
    <div class="alert alert-info">Loading Categories...</div>
}
else
{
    <div class="row justify-content-center">
        <div class="col-md-10">
            <div class="card mt-3 mb-3">
                <div class="card-header">
                    <h2>Add Products</h2>
                </div>
                <div class="card-body">
                    @if (isCreationSuccess)
                    {
                        <div class="alert alert-success" role="alert">Product has been successfully added</div>
                    }

                <EditForm Model="@newproduct" OnValidSubmit="AddProduct">
                    <DataAnnotationsValidator />
                    <CustomFormValidator @ref="customFormValidator" />
                    @*<AuthorizeView Context="Userdata">
            <input type="hidden" value="@Userdata.User.Identity" name="Username" />
            <ValidationMessage For="@(() => @Userdata.User.Identity)" />
        </AuthorizeView>*@
                    <div class="form-group row">
                        <label class="control-label col-md-12">Username</label>
                        <div class="col">
                            <InputText class="form-control" @bind-Value="newproduct.Username" />
                            <ValidationMessage For="@(() => newproduct.Username)" />
                        </div>
                    </div>

                    <div class="form-group row">
                        <label class="control-label col-md-12">Product Name</label>
                        <div class="col">
                            <InputText class="form-control" @bind-Value="newproduct.Name" />
                            <ValidationMessage For="@(() => newproduct.Name)" />
                        </div>
                    </div>

                    <div class="form-group row">
                        <label class="control-label col-md-12">Product Description</label>
                        <div class="col">
                            <InputText class="form-control" @bind-Value="newproduct.Description" />
                            <ValidationMessage For="@(() => newproduct.Description)" />
                        </div>
                    </div>

                    <div class="form-group row">
                        <label class="control-label col-md-12">Stock</label>
                        <div class="col">
                            <InputNumber class="form-control" @bind-Value=newproduct.Stock />
                            <ValidationMessage For="@(() => newproduct.Stock)" />
                        </div>
                    </div>

                    <div class="form-group row">
                        <label class="control-label col-md-12">Price(no decimal)</label>
                        <div class="col">
                            <InputNumber class="form-control" @bind-Value=newproduct.Price />
                            <ValidationMessage For="@(() => newproduct.Price)" />
                        </div>
                    </div>

                    <div class="form-group row">
                        <label class="control-label col-md-12">Category</label>
                        <div class="col">
                            <InputSelect class="form-control" @bind-Value="newproduct.P_Category">
                                @foreach (var category in Categories)
                                    {
                                    <option value="@category.Name">@category.Name</option>
                                    }
                            </InputSelect>
                            <ValidationMessage For="@(() => newproduct.P_Category)" />
                        </div>
                    </div>
                    <div class="form-group" align="right">
                        <button type="submit" class="btn btn-success">Add</button>
                    </div>


                </EditForm>
                </div>
            </div>
        </div>
    </div>
}


@code {

    private List<Category> Categories;

    protected async override Task OnInitializedAsync()
    {
        Categories = await _client.GetFromJsonAsync<List<Category>>($"{Endpoints.CategoriesEndpoint}");
    }
}