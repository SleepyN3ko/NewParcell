@page "/sell"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]





<link rel="stylesheet" type="text/css" href="/css/Sell.css" />

@if (Products == null)
{
    <div class="alert alert-info">Loading Products...</div>
}


else
{
    

    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Product no</th>
                <th>Name</th>
                <th>Details</th>
                <th>Category</th>
                <th>Edit product</th>
                <th>Delete product</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in Products)
            {
                count++;
            <tr>
                <td>@count</td>
                <td>@product.Name</td>
                <td>
                    <ul>
                        <li>Description = @product.Description</li>
                        <li>Stock = @product.Stock</li>
                        <li>Price = @product.Price</li>
                    </ul>
                </td>
                <td>@product.P_category</td>
                <td>
                    <a href="/products/edit/@product.Id" class="btn btn-warning">
                        <span class="oi oi-pencil"></span>
                    </a>
                </td>
                <td>
                    <button class="btn btn-danger" @onclick="@(()=>Delete(product.Id))">
                        <span class="oi oi-delete"></span>
                    </button>
                </td>
            </tr>
            }
        </tbody>
    </table>
}
<button style="border-radius:20px;background-color:red;color:white;position:fixed;left:95%;top:90%;width:40px;height:40px;" onclick="location.href = 'add-products';">+</button>



@code {
    public int count;

    private List<Product> Products;

    protected async override Task OnInitializedAsync()
    {
        Products = await _client.GetFromJsonAsync<List<Product>>($"{Endpoints.ProductsEndpoint}");

    }

    async Task Delete(int productId)
    {
        var product = Products.First(q => q.Id == productId);

        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {product.Name}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.ProductsEndpoint}/{productId}");
            await OnInitializedAsync();
        }
    }

}
