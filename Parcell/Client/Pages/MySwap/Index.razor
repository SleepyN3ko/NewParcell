@page "/myswap"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]


@if (swaps == null)
{
    <div class="alert alert-info">Loading Swaps...</div>
}


else
{
    <AuthorizeView Context="getName">
        <Authorized>
            <div class="table-responsive">
                <table class="table">
                    <thead>
                        <tr>
                            <th>Swap Owner</th>
                            <th>Product Owner</th>
                            <th>Swap Item</th>
                            <th>Product Item</th>
                            <th>Edit Swap</th>
                            <th>Remove Swap</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var swap in swaps)
                        {
                            @if (swap.S_username != getName.User.Identity.Name || swap.P_username != getName.User.Identity.Name)
                            {
                                <tr>
                                    <td>@swap.S_username</td>
                                    <td>@swap.P_username</td>
                                    <td>@swap.SProduct_id</td>
                                    <td>@swap.PProduct_id</td>
                                    <td>
                                        <a href="/myswap/view/@swap.Id" class="btn btn-info">
                                            <span class="oi oi-book"></span>
                                        </a>
                                    </td>
                                    <td>
                                        <button class="btn btn-danger" @onclick="@(()=>RemoveFromSwap(swap.Id,"this swap?"))">
                                            <span class="oi oi-delete"></span>
                                        </button>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </Authorized>
    </AuthorizeView>
}

@code {

    private List<Swap> swaps;


    protected async override Task OnInitializedAsync()
    {
        swaps = await _client.GetFromJsonAsync<List<Swap>>($"{Endpoints.SwapsEndpoint}");
    }
    async Task RemoveFromSwap(int swapitemid, string productName)
    {
        var swapitem = swaps.First(q => q.Id == swapitemid);

        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {productName}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.SwapsEndpoint}/{swapitemid}");
            await OnInitializedAsync();
        }
    }
}