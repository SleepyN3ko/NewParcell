@page "/myswap"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]

@inject HttpInterceptorService _interceptor
@implements IDisposable

@if (finished == false)
{
    <div class="alert alert-info">Loading Swaps...</div>
}
else
{
    <AuthorizeView Context="getName">
        <Authorized>
            <div class="table-responsive">
                <table class="table">
                    <thead>
                        <tr>
                            <th>Swap Owner</th>
                            <th>Product Owner</th>
                            <th>Swap Item</th>
                            <th>Product Item</th>
                            <th>Edit Swap</th>
                            <th>Remove Swap</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var swap in swaps)
                        {
                            @if (swap.PProduct.Username != getName.User.Identity.Name || swap.SProduct.Username != getName.User.Identity.Name)
                            {
                                <tr>
                                    <td>@swap.SProduct.Username</td>
                                    <td>@swap.PProduct.Username</td>
                                    <td>@swap.SProduct.Name</td>
                                    <td>@swap.PProduct.Name</td>
                                    <td>
                                        <a href="/myswap/view/@swap.Id" class="btn btn-info">
                                            <span class="oi oi-book"></span>
                                        </a>
                                    </td>
                                    <td>
                                        <button class="btn btn-danger" @onclick="@(()=>RemoveFromSwap(swap.Id,"this swap?"))">
                                            <span class="oi oi-delete"></span>
                                        </button>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </Authorized>
    </AuthorizeView>
}

@code {

    private List<Swap> swaps;
    Product swapproduct = new Product();
    Product ownerproduct = new Product();
    public Boolean finished = false;
    public string username;

    protected async override Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        swaps = await _client.GetFromJsonAsync<List<Swap>>($"{Endpoints.SwapsEndpoint}");
        //Assigns the product to swap so that it can be more easily accessed
        foreach (var swap in swaps)
        {
            swap.SProduct = await _client.GetFromJsonAsync<Product>($"{Endpoints.ProductsEndpoint}/{swap.SProduct_id}");
            swap.PProduct = await _client.GetFromJsonAsync<Product>($"{Endpoints.ProductsEndpoint}/{swap.PProduct_id}");
        }
        finished = true;
    }
    async Task RemoveFromSwap(int swapitemid, string productName)
    {
        //javascript interop to confirm that the user wants to delete the swap
        var swapitem = swaps.First(q => q.Id == swapitemid);

        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {productName}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.SwapsEndpoint}/{swapitemid}");
            await OnInitializedAsync();
        }
    }
    public void Dispose()
    {
        _interceptor.DisposeEvent();
    }
}