@page "/topup"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@inject HttpInterceptorService _interceptor
@implements IDisposable

<AuthorizeView Context="getName">
    @{ username = getName.User.Identity.Name;}
</AuthorizeView>

@if (finished == false)
{
    <div class="alert alert-info">Loading Balance...</div>
}
else
{
    <b style="font-size: 18px; ">Hello @username, your current balance is @currentBalance.Amount .</b>
    <br /><br />
    <label><strong>Amount to add: </strong></label>
    <input type="number" @bind-value="@amountToAdd" />
    <br /><br />
    <button class="btn btn-round" style="right:100px; background-color:green;color:white" type="button" @onclick="()=>addBalance()"><span class="oi oi-plus"></span>Add Balance</button>
}
@code {

    private List<Balance> balances;
    private Balance currentBalance = new Balance();
    private int balanceid = -69;
    public string username;
    public int amountToAdd;
    public Boolean finished = false;

    protected override async Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        balances = await _client.GetFromJsonAsync<List<Balance>>($"{Endpoints.BalancesEndpoint}");
        //code used to generate a new balance for the user
        foreach (var balance in balances)
        {
            if (balance.Username == username)
            {
                currentBalance = balance;
                balanceid = balance.Id;
            }
        }
        if (balanceid == -69)
        {
            currentBalance.Username = username;
            var response = await _client.PostAsJsonAsync(Endpoints.BalancesEndpoint, currentBalance);
            //customised API which returns where the is the created balance
            string location = response.Headers.Location.AbsoluteUri;
            currentBalance = await _client.GetFromJsonAsync<Balance>($"{location}");
            balanceid = currentBalance.Id;
        }
        finished = true;
        StateHasChanged();
    }

    async Task addBalance()
    {
        //add the user inputed amount to their balance
        //prevents user from removing money from their own balance
        if (amountToAdd > 0)
        {
            currentBalance.Amount += amountToAdd;
            await _client.PutAsJsonAsync($"{Endpoints.BalancesEndpoint}/{currentBalance.Id}", currentBalance);
            await OnInitializedAsync();
        }
    }
    public void Dispose()
    {
        _interceptor.DisposeEvent();
    }
}
